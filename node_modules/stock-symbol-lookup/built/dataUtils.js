"use strict";
var camelCase = require("camelcase");
var ftpUtils_1 = require("./ftpUtils");
var utilities_1 = require("./utilities");
var files = ['nasdaqlisted.txt', 'otherlisted.txt'];
var dataUtils = {
    getData: function () {
        return this.downloadFiles()
            .then(this.parseFiles)
            .then(utilities_1.utilities.mergeArrays)
            .then(this.sortData);
    },
    downloadFiles: function () {
        var fileDataArray = [];
        return new Promise(function (resolve, reject) {
            files.forEach(function (file) {
                ftpUtils_1.ftpUtils.fetchFile(file)
                    .then(function (data) {
                    if (!data) {
                        reject(new Error('No data received from ' + file));
                    }
                    fileDataArray.push(data);
                    if (fileDataArray.length >= files.length) {
                        resolve(fileDataArray);
                    }
                });
            });
        });
    },
    parseFiles: function (fileDataArray) {
        var parsedDataArray = [];
        return new Promise(function (resolve, reject) {
            fileDataArray.forEach(function (data) {
                if (!data) {
                    return;
                }
                var parsedData = [], rows = data.split('\r\n'), headerRow = rows.shift(), keys = headerRow.split('|');
                rows.forEach(function (row) {
                    var companyMeta = {};
                    keys.forEach(function (key) {
                        var keyName = camelCase(key);
                        if (key === 'NASDAQ Symbol') {
                            keyName = 'symbol';
                        }
                        companyMeta[keyName] = row.split('|')[keys.indexOf(key)];
                    });
                    parsedData.push(companyMeta);
                });
                parsedDataArray.push(parsedData);
                if (parsedDataArray.length >= fileDataArray.length) {
                    resolve(parsedDataArray);
                }
            });
        });
    },
    sortData: function (data) {
        return new Promise(function (resolve, reject) {
            var indexedData = [];
            utilities_1.utilities.alphabet.forEach(function (letter, index) {
                indexedData[index] = [];
            });
            data.forEach(function (item, index) {
                if (!item.symbol) {
                    return;
                }
                var letterIndex = utilities_1.utilities.alphabet.indexOf(item.symbol.charAt(0).toLowerCase());
                if (!indexedData[letterIndex]) {
                    return;
                }
                indexedData[letterIndex].push(item);
            });
            utilities_1.utilities.alphabet.forEach(function (letter, index) {
                indexedData[index].sort(function (a, b) {
                    if (a.symbol < b.symbol) {
                        return -1;
                    }
                    if (a.symbol > b.symbol) {
                        return 1;
                    }
                    return 0;
                });
            });
            resolve({
                symbols: indexedData,
                securities: data
            });
        });
    }
};
exports.dataUtils = dataUtils;
