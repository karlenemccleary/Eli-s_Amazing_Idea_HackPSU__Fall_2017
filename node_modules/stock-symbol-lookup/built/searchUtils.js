"use strict";
var utilities_1 = require("./utilities");
var searchUtils = {
    data: null,
    search: function (input, maxEntries, unique) {
        return Promise.all([
            this.searchBySymbol(input, maxEntries),
            this.searchBySecurity(input, unique ? maxEntries * 2 : maxEntries)
        ])
            .then(function (results) {
            var symbols = results[0], symbolNames = symbols.map(function (item) { return item.symbol; }), securities = [];
            results[1].every(function (item) {
                if (symbolNames.indexOf(item.symbol) !== -1) {
                    return false;
                }
                securities.push(item);
                return maxEntries ? securities.length < maxEntries : true;
            });
            return [symbols, securities];
        });
    },
    searchAll: function (input, maxEntries) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var results = [];
            // if the input value is an empty string don't filter the items
            if (input && input.trim() !== '') {
                var val_1 = input.toLowerCase();
                if (!(_this.data && _this.data.securities && _this.data.securities.length)) {
                    resolve(results);
                }
                _this.data.securities.every(function (item) {
                    if (item &&
                        typeof item.securityName === 'string' &&
                        typeof item.symbol === 'string' &&
                        (item.securityName.toLowerCase().indexOf(val_1) > -1 ||
                            item.symbol.toLowerCase().indexOf(val_1) > -1)) {
                        results.push(item);
                    }
                    return maxEntries ? results.length < maxEntries : true;
                });
            }
            resolve(results);
        });
    },
    searchBySymbol: function (input, maxEntries) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var results = [];
            if (!(_this.data && _this.data.symbols && _this.data.symbols.length)) {
                resolve(results);
            }
            // if the input value is an empty string don't filter the items
            if (input && input.trim() !== '') {
                var val_2 = input.toLowerCase();
                var letterArray = _this.data.symbols[utilities_1.utilities.alphabet.indexOf(val_2.charAt(0))];
                if (!letterArray) {
                    resolve(results);
                }
                letterArray.every(function (item) {
                    if (item &&
                        typeof item.symbol === 'string' &&
                        item.symbol.toLowerCase().indexOf(val_2) > -1) {
                        results.push(item);
                    }
                    return maxEntries ? results.length < maxEntries : true;
                });
            }
            resolve(results);
        });
    },
    searchBySecurity: function (input, maxEntries) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var results = [];
            // if the input value is an empty string don't filter the items
            if (input && input.trim() !== '') {
                var val_3 = input.toLowerCase();
                if (!(_this.data && _this.data.securities && _this.data.securities.length)) {
                    resolve(results);
                }
                _this.data.securities.every(function (item) {
                    if (item &&
                        typeof item.securityName === 'string' &&
                        item.securityName.toLowerCase().indexOf(val_3) > -1) {
                        results.push(item);
                    }
                    return maxEntries ? results.length < maxEntries : true;
                });
            }
            resolve(results);
        });
    }
};
exports.searchUtils = searchUtils;
